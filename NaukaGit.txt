Oto i zmieniona treść, teraz tylko skomitować.

1.1. Czym jest git i co umożliwia?

Git jest systemem kontroli wersji, czyli programem zapisującym wszystkie zmiany dokonywane w projekcie na przestrzeni czasu. W ten sposób tworzone są wersje projektu.
Dzięki gitowi jesteśmy w stanie przeglądać historię zmian zachodzących w pliku i w razie potrzeby przywrócić go do poprzedniej wersji.

1.2. Na czym polega branching i co to są gałęzie?

Branching polega na tworzeniu nowych fukcji aplikacji bez ingerencji w jej główny kod źródłowy. 
Gałęzie to właśnie te nowe funkcje. Mogą być one tworzone niezależnie od kodu źródłowego aplikacji oraz niezależnie modyfikowane, dodawane bądź usuwane.

1.3. Czym jest repozytorium?

Jest to cała historia zmian dokonywanych w projekcie oraz jego kod źródłowy.

1.4. Jakie wyróżnia się dwa typy repozytorium?

Repozytorium lokalne i zdalne.

1.5. Czym jest plik .gitignore?

Służy on do tego, aby żadne "niepowołane" pliki nie trafiły do naszego repozytorium. Jeżeli Git interpretuje pewne pliki 
jako część naszego repo, z pomocą .gitignore możemy "poinformować" gita, żeby te pliki zignorował.

1.6. Kto/Co to jest master?

Masterem określamy branch, na którym aktualnie znajduje się stabilna, "właściwa" wersja projektu, zwykle połączona z serwerem produkcyjnym.

1.7. Kto/Co to jest collaborators?

Jest to społeczność pracująca nad jednym projektem.

1.8. Czym jest polecenie commit?

Polecenie commit służy do wysłania zmian w kodzie źródłowym aplikacji lub branchu ze stage area do .git folder (lokalne repo).

1.9. Czym jest klonowanie?

Klonowanie to pobieranie na swój komputer sforkowanego wcześniej repozytorium. 

1.10. Czym jest merge a czym rebase?

Merge to funkcja łącząca 2 branche za pośrednictwem użycia commitu. Historia zmian brancha będzie widoczna nawet po połączeniu z Masterem. 
Rebase to również funkcja łączaca 2 branche, jednak w tym przypadku, wszystkie zmiany z pierwszego branchu "importujemy" do drugiego.
Historia zmian w branchu po połączeniu z Masterem nie będzie widoczna. Zachowamy strukturę liniową.

1.11. Czym jest Pull Request?

Funkcji Pull Request używamy w momencie, kiedy zmiany w sklonowanym forku są już wprowadzone i znajdują się w środowisku zdalnym.
Pull Request jest wysyłany do "właściciela" repozytorium, jest to niejako prośba o akceptację wprowadzonych przez nas zmian.
Do akceptacji naszego Pull Request służy funkcja "Merge Pull Request".

1.12. Co to jest “Fork”

Fork jest kopią zdalnego repozytorium, utworzoną na naszym środowisku lokalnym.
Funkcja ta jest przydatna w sytuacji, kiedy nie mamy uprawnień do aktualizacji zdalnego repozytorium.

1.13. W jaki sposób poprawnie nazywać commit message.

Commit message to komentarz, który pojawi się w repozytorium przy pozycji ze zmianami, które właśnie wysłaliśmy. 
Aby dodać komentarz za pomocą konsoli należy użyć komendy git commit -m "treść komentarza",
lub wywołać uruchomienie edytora tekstu wysyłając plik komendą git commit.
Każdy komentarz powinien zawierać temat oraz treść, oddzielone pustym wierszem (pusty wiersz dodamy wyłącznie za pomocą edytora tekstu.
Nie jest to możliwe bezpośrednio z wiersza poleceń.
Należy dążyć do sytuacji, w której komentarz posiada maksymalnie dużo treści w jak najkrótszej formie.
Dobrą praktyką jest ograniczenie treści tytułu komentarza do 50 znaków (chodzi głównie o zachowanie czytelności przy przeglądaniu skróconej historii repo w Gicie).
Należy ograniczyć długość wiersza treści komentarza do 72 znaków. Chodzi o czytelność komentarza w konsoli, która nie będzie automatycznie łamać wierszy,
chyba, że komentarze będziemy dodawać przez wcześniej skonfigurowany edytor tekstu.
Sama treść komentarza powinna zawierać odpowiedź na pytania co i dlaczego zostało zmienione.
Odpowiedzą na pytanie "jak" to zostało zmienione jest kod źródłowy.
