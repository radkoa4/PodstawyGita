1.1. Czym jest git i co umo�liwia?

Git jest systemem kontroli wersji, czyli programem zapisuj�cym wszystkie zmiany dokonywane w projekcie na przestrzeni czasu. W ten spos�b tworzone s� wersje projektu.
Dzi�ki gitowi jeste�my w stanie przegl�da� histori� zmian zachodz�cych w pliku i w razie potrzeby przywr�ci� go do poprzedniej wersji.

1.2. Na czym polega branching i co to s� ga��zie?

Branching polega na tworzeniu nowych fukcji aplikacji bez ingerencji w jej g��wny kod �r�d�owy. 
Ga��zie to w�a�nie te nowe funkcje. Mog� by� one tworzone niezale�nie od kodu �r�d�owego aplikacji oraz niezale�nie modyfikowane, dodawane b�d� usuwane.

1.3. Czym jest repozytorium?

Jest to ca�a historia zmian dokonywanych w projekcie oraz jego kod �r�d�owy.

1.4. Jakie wyr�nia si� dwa typy repozytorium?

Repozytorium lokalne i zdalne.

1.5. Czym jest plik .gitignore?

S�u�y on do tego, aby �adne "niepowo�ane" pliki nie trafi�y do naszego repozytorium. Je�eli Git interpretuje pewne pliki 
jako cz�� naszego repo, z pomoc� .gitignore mo�emy "poinformowa�" gita, �eby te pliki zignorowa�.

1.6. Kto/Co to jest master?

Masterem okre�lamy branch, na kt�rym aktualnie znajduje si� stabilna, "w�a�ciwa" wersja projektu, zwykle po��czona z serwerem produkcyjnym.

1.7. Kto/Co to jest collaborators?

Jest to spo�eczno�� pracuj�ca nad jednym projektem.

1.8. Czym jest polecenie commit?

Polecenie commit s�u�y do wys�ania zmian w kodzie �r�d�owym aplikacji lub branchu ze stage area do .git folder (lokalne repo).

1.9. Czym jest klonowanie?

Klonowanie to pobieranie na sw�j komputer sforkowanego wcze�niej repozytorium. 

1.10. Czym jest merge a czym rebase?

Merge to funkcja ��cz�ca 2 branche za po�rednictwem u�ycia commitu. Historia zmian brancha b�dzie widoczna nawet po po��czeniu z Masterem. 
Rebase to r�wnie� funkcja ��czaca 2 branche, jednak w tym przypadku, wszystkie zmiany z pierwszego branchu "importujemy" do drugiego.
Historia zmian w branchu po po��czeniu z Masterem nie b�dzie widoczna. Zachowamy struktur� liniow�.

1.11. Czym jest Pull Request?

Funkcji Pull Request u�ywamy w momencie, kiedy zmiany w sklonowanym forku s� ju� wprowadzone i znajduj� si� w �rodowisku zdalnym.
Pull Request jest wysy�any do "w�a�ciciela" repozytorium, jest to niejako pro�ba o akceptacj� wprowadzonych przez nas zmian.
Do akceptacji naszego Pull Request s�u�y funkcja "Merge Pull Request".

1.12. Co to jest �Fork�

Fork jest kopi� zdalnego repozytorium, utworzon� na naszym �rodowisku lokalnym.
Funkcja ta jest przydatna w sytuacji, kiedy nie mamy uprawnie� do aktualizacji zdalnego repozytorium.

1.13. W jaki spos�b poprawnie nazywa� commit message.

Commit message to komentarz, kt�ry pojawi si� w repozytorium przy pozycji ze zmianami, kt�re w�a�nie wys�ali�my. 
Aby doda� komentarz za pomoc� konsoli nale�y u�y� komendy git commit -m "tre�� komentarza",
lub wywo�a� uruchomienie edytora tekstu wysy�aj�c plik komend� git commit.
Ka�dy komentarz powinien zawiera� temat oraz tre��, oddzielone pustym wierszem (pusty wiersz dodamy wy��cznie za pomoc� edytora tekstu.
Nie jest to mo�liwe bezpo�rednio z wiersza polece�.
Nale�y d��y� do sytuacji, w kt�rej komentarz posiada maksymalnie du�o tre�ci w jak najkr�tszej formie.
Dobr� praktyk� jest ograniczenie tre�ci tytu�u komentarza do 50 znak�w (chodzi g��wnie o zachowanie czytelno�ci przy przegl�daniu skr�conej historii repo w Gicie).
Nale�y ograniczy� d�ugo�� wiersza tre�ci komentarza do 72 znak�w. Chodzi o czytelno�� komentarza w konsoli, kt�ra nie b�dzie automatycznie �ama� wierszy,
chyba, �e komentarze b�dziemy dodawa� przez wcze�niej skonfigurowany edytor tekstu.
Sama tre�� komentarza powinna zawiera� odpowied� na pytania co i dlaczego zosta�o zmienione.
Odpowiedz� na pytanie "jak" to zosta�o zmienione jest kod �r�d�owy.